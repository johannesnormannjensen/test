name: Do the thing

on: 
  workflow_dispatch:
    inputs:
      dojob2:
        description: Should job2 be run
        type: boolean
        default: false
        required: true 
      test2ReleaseName:
        description: Do a release to test2 with this name
        type: string
        required: false 
jobs:



  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      customers: ${{ steps.get-customers.outputs.result }}
    steps:
      - name: Checkout files
        uses: Bhacaz/checkout-files@v2
        with:
          files: .github/test.json
      
      - uses: actions/github-script@v6
        id: get-customers
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');
            const data = fs.readFileSync(path.join('${{github.workspace}}', '.github/', 'test.json'));
            const parsed = JSON.parse(data);
            return JSON.stringify(Object.entries(parsed).filter(([, value]) => !!value.isRealCustomer).map(([key]) => key))


  job1:
    runs-on: ubuntu-latest
    needs: create-matrix
      
    strategy:
      matrix:
        customer: ${{ fromJson(needs.create-matrix.outputs.customers) }}
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Get result
        run: echo "${{ matrix.customer }}"
        

#   job1:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
      
#       - uses: actions/github-script@v6
#         id: getcustomer
#         with:
#           result-encoding: string
#           script: |
#             const fs = require('fs');
#             const path = require('path');
#             const data = fs.readFileSync(path.join('${{github.workspace}}', 'test.json'));
#             const { stdout } = await exec.getExecOutput('git rev-parse HEAD');
#             core.info(`commit sha is ${stdout}`);
#             let parsed = JSON.parse(data);
#             return parsed.customer;
            
#       - name: Get result
#         run: echo "${{steps.getcustomer.outputs.result}}"
        
  
#       - name: set SOME_VAR in env
#         run: echo "SOME_VAR=yeeeeeeah">> $GITHUB_ENV


#   job2:
#     if: ${{ github.event.inputs.dojob2 == 'true' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get result
#         run: echo "job2 ran"

#   job3:
#     runs-on: ubuntu-latest
#     needs: job1
#     steps:
#       - name: echo SOME_VAR
#         run: echo "$SOME_VAR"
        
#   job4:
#     runs-on: ubuntu-latest
#     if: ${{ github.event.inputs.test2ReleaseName != '' }}
#     steps:
    
#       - uses: actions/checkout@v2
      
#       - uses: ./.github/composite-actions/deliver-release
#         with: 
#           name: ${{ github.event.inputs.test2ReleaseName }}
#           githubRepository: johannesnormannjensen/test2
#           releaseZip: "${{ github.workspace }}/somezipfile.zip"
#           pat: ${{ secrets.pat }}
